diff --git a/dist/index.d.mts b/dist/index.d.mts
index e0f9bb0c3068ca6fa0672be77d03173eb429eb7f..a1b5f19a70513e724bfc3d9f9c80bce4f87342ab 100644
--- a/dist/index.d.mts
+++ b/dist/index.d.mts
@@ -129,7 +129,7 @@ declare const compatibilityHelper: (runtimeApi: RuntimeApi, getDescriptorChecksu
 };
 type CompatibilityHelper = ReturnType<typeof compatibilityHelper>;
 
-interface ConstantEntry<T> {
+export interface ConstantEntry<T> {
     /**
      * Constants are simple key-value structures found in the runtime metadata.
      *
@@ -215,7 +215,7 @@ type CallOptions$1 = Partial<{
     signal: AbortSignal;
 }>;
 type WithCallOptions$1<Args extends Array<any>> = Args["length"] extends 0 ? [options?: CallOptions$1] : [...args: Args, options?: CallOptions$1];
-interface RuntimeCall<Args extends Array<any>, Payload> {
+export interface RuntimeCall<Args extends Array<any>, Payload> {
     /**
      * Get `Payload` (Promise-based) for the runtime call.
      *
@@ -248,7 +248,7 @@ type WithCallOptions<Args extends Array<any>> = [
     options?: CallOptions
 ];
 type PossibleParents<A extends Array<any>> = A extends [...infer Left, any] ? Left | PossibleParents<Left> : [];
-type StorageEntryWithoutKeys<Payload> = {
+export type StorageEntryWithoutKeys<Payload> = {
     /**
      * `isCompatible` enables you to check whether or not the call you're trying
      * to make is compatible with the descriptors you generated on dev time.
@@ -269,7 +269,7 @@ type StorageEntryWithoutKeys<Payload> = {
      */
     watchValue: (bestOrFinalized?: "best" | "finalized") => Observable<Payload>;
 };
-type StorageEntryWithKeys<Args extends Array<any>, Payload> = {
+export type StorageEntryWithKeys<Args extends Array<any>, Payload> = {
     /**
      * `isCompatible` enables you to check whether or not the call you're trying
      * to make is compatible with the descriptors you generated on dev time.
@@ -321,7 +321,7 @@ type StorageEntryWithKeys<Args extends Array<any>, Payload> = {
         value: NonNullable<Payload>;
     }>>;
 };
-type StorageEntry<Args extends Array<any>, Payload> = Args extends [] ? StorageEntryWithoutKeys<Payload> : StorageEntryWithKeys<Args, Payload>;
+export type StorageEntry<Args extends Array<any>, Payload> = Args extends [] ? StorageEntryWithoutKeys<Payload> : StorageEntryWithKeys<Args, Payload>;
 
 type TxEvent = TxSigned | TxBroadcasted | TxBestBlocksState | TxFinalized;
 type TxBroadcastEvent = TxSigned | TxBroadcasted | TxBestBlocksState | TxFinalized;
diff --git a/dist/index.d.ts b/dist/index.d.ts
index e0f9bb0c3068ca6fa0672be77d03173eb429eb7f..a1b5f19a70513e724bfc3d9f9c80bce4f87342ab 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -129,7 +129,7 @@ declare const compatibilityHelper: (runtimeApi: RuntimeApi, getDescriptorChecksu
 };
 type CompatibilityHelper = ReturnType<typeof compatibilityHelper>;
 
-interface ConstantEntry<T> {
+export interface ConstantEntry<T> {
     /**
      * Constants are simple key-value structures found in the runtime metadata.
      *
@@ -215,7 +215,7 @@ type CallOptions$1 = Partial<{
     signal: AbortSignal;
 }>;
 type WithCallOptions$1<Args extends Array<any>> = Args["length"] extends 0 ? [options?: CallOptions$1] : [...args: Args, options?: CallOptions$1];
-interface RuntimeCall<Args extends Array<any>, Payload> {
+export interface RuntimeCall<Args extends Array<any>, Payload> {
     /**
      * Get `Payload` (Promise-based) for the runtime call.
      *
@@ -248,7 +248,7 @@ type WithCallOptions<Args extends Array<any>> = [
     options?: CallOptions
 ];
 type PossibleParents<A extends Array<any>> = A extends [...infer Left, any] ? Left | PossibleParents<Left> : [];
-type StorageEntryWithoutKeys<Payload> = {
+export type StorageEntryWithoutKeys<Payload> = {
     /**
      * `isCompatible` enables you to check whether or not the call you're trying
      * to make is compatible with the descriptors you generated on dev time.
@@ -269,7 +269,7 @@ type StorageEntryWithoutKeys<Payload> = {
      */
     watchValue: (bestOrFinalized?: "best" | "finalized") => Observable<Payload>;
 };
-type StorageEntryWithKeys<Args extends Array<any>, Payload> = {
+export type StorageEntryWithKeys<Args extends Array<any>, Payload> = {
     /**
      * `isCompatible` enables you to check whether or not the call you're trying
      * to make is compatible with the descriptors you generated on dev time.
@@ -321,7 +321,7 @@ type StorageEntryWithKeys<Args extends Array<any>, Payload> = {
         value: NonNullable<Payload>;
     }>>;
 };
-type StorageEntry<Args extends Array<any>, Payload> = Args extends [] ? StorageEntryWithoutKeys<Payload> : StorageEntryWithKeys<Args, Payload>;
+export type StorageEntry<Args extends Array<any>, Payload> = Args extends [] ? StorageEntryWithoutKeys<Payload> : StorageEntryWithKeys<Args, Payload>;
 
 type TxEvent = TxSigned | TxBroadcasted | TxBestBlocksState | TxFinalized;
 type TxBroadcastEvent = TxSigned | TxBroadcasted | TxBestBlocksState | TxFinalized;
